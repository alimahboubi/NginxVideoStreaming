daemon off;
worker_processes auto;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
        # multi_accept on;
}

rtmp {
    server {
        listen 1935;
        chunk_size 4000;

        application hls {
            live off;
            hls on;
            hls_fragment_naming system;
            hls_fragment 5;
            hls_playlist_length 10;
            hls_path /srv/data/hls;
            hls_nested on;
            deny play all;
			hls_cleanup off;

            hls_variant _1080p5000kbs BANDWIDTH=5000000,RESOLUTION=1920x1080;
            hls_variant _720p2628kbs BANDWIDTH=2628000,RESOLUTION=1280x720;
            hls_variant _480p1128kbs BANDWIDTH=1128000,RESOLUTION=854x480;
            hls_variant _360p878kbs BANDWIDTH=878000,RESOLUTION=640x360;
            hls_variant _240p528kbs BANDWIDTH=528000,RESOLUTION=426x240;
            hls_variant _240p264kbs BANDWIDTH=264000,RESOLUTION=426x240;
        }
    }
}

http {
    sendfile off;
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;


    ssl_ciphers         HIGH:!aNULL:!MD5;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
	
	

    server {
        listen 443;

        root /srv/data/;
        # Uncomment these lines to enable SSL.
        # Update the ssl paths with your own certificate and private key.
        # listen 443 ssl;
        # ssl_certificate     /opt/certs/example.com.crt;
        # ssl_certificate_key /opt/certs/example.com.key;

        types {
            application/dash+xml mpd;
            application/vnd.apple.mpegurl m3u8;
            video/mp2t ts;
            plain/text key;
			plain/text vtt;
        }

        location /video {
            rewrite  /hls/([a-zA-Z0-9_\-]*)/([a-zA-Z0-9_\-]*)/([0-9]*)/(.*)\.(ts|m3u8|key|vtt)$ /hls/$1/$4.$5?token=$2&expires=$3;
            root /srv/data/not-exist;
        }

        location /hls/ {
            internal;

            #add_header "X-token" "token-$arg_token" always;
            #add_header "X-expires" "exp-$arg_expires" always;
            #add_header "X-Test_FWRD" "-- $http_x_forwarded_for --" always;
			#add_header "X-ip" "exp-$remote_addr" always;
			#add_header "X-realip" "exp-$http_x_real_ip" always;
            secure_link $arg_token,$arg_expires;
            secure_link_md5 "$secure_link_expires $http_x_real_ip 284e2ac4c61754d42467c824a4acc04b";
            if ($secure_link = "") { return 403; }
            if ($secure_link = "0") { return 410; }


         
            ## allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' 'https://example.com';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        #location /stat {
        #    rtmp_stat all;
        #    rtmp_stat_stylesheet static/stat.xsl;
        #}
        #
        #location /static {
        #    alias /www/static;
        #}
        #
        #location = /crossdomain.xml {
        #    root /www/static;
        #    default_type text/xml;
        #    expires 24h;
        #}
    }
}

